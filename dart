// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal
import 'dart:convert';
import 'dart:typed_data';

import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class FlutterRustBridgeStreamSyncStructs
    extends FlutterRustBridgeBase<FlutterRustBridgeStreamSyncStructsWire> {
  factory FlutterRustBridgeStreamSyncStructs(ffi.DynamicLibrary dylib) =>
      FlutterRustBridgeStreamSyncStructsImpl.raw(
          FlutterRustBridgeStreamSyncStructsWire(dylib));

  FlutterRustBridgeStreamSyncStructs.raw(
      FlutterRustBridgeStreamSyncStructsWire inner)
      : super(inner);

  Stream<MidiMessage> streamSinkWithStruct({dynamic hint});
}

class MidiMessage {
  final int message;
  final int stamp;

  MidiMessage({
    required this.message,
    required this.stamp,
  });
}

// ------------------------- Implementation Details -------------------------

/// Implementations for FlutterRustBridgeStreamSyncStructs. Prefer using FlutterRustBridgeStreamSyncStructs if possible; but this class allows more
/// flexible customizations (such as subclassing to create an initializer, a logger, or
/// a timer).
class FlutterRustBridgeStreamSyncStructsImpl
    extends FlutterRustBridgeStreamSyncStructs {
  FlutterRustBridgeStreamSyncStructsImpl.raw(
      FlutterRustBridgeStreamSyncStructsWire inner)
      : super.raw(inner);

  Stream<MidiMessage> streamSinkWithStruct({dynamic hint}) =>
      executeStream(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_stream_sink_with_struct(port),
        parseSuccessData: _wire2api_midi_message,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "stream_sink_with_struct",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  // Section: api2wire

  // Section: api_fill_to_wire

}

// Section: wire2api
MidiMessage _wire2api_midi_message(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return MidiMessage(
    message: _wire2api_u8(arr[0]),
    stamp: _wire2api_u32(arr[1]),
  );
}

int _wire2api_u32(dynamic raw) {
  return raw as int;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class FlutterRustBridgeStreamSyncStructsWire
    implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterRustBridgeStreamSyncStructsWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterRustBridgeStreamSyncStructsWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_stream_sink_with_struct(
    int port,
  ) {
    return _wire_stream_sink_with_struct(
      port,
    );
  }

  late final _wire_stream_sink_with_structPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_stream_sink_with_struct');
  late final _wire_stream_sink_with_struct =
      _wire_stream_sink_with_structPtr.asFunction<void Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
